[tool]
[tool.poetry]
name = "sklearn-stubs"
version = "0.1.0"
homepage = "https://github.com/danibene/sklearn-stubs"
description = "Public type stubs for sklearn."
authors = ["Microsoft Python team and others"]
readme = "README.md"
license =  "MIT"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
]
packages = [
    { include = "sklearn-stubs" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"

black  = { version = "^22.3.0", optional = true}
isort  = { version = "5.10.1", optional = true}
flake8  = { version = "4.0.1", optional = true}
flake8-docstrings = { version = "^1.6.0", optional = true }
pytest  = { version = "^7.0.1", optional = true}
pytest-cov  = { version = "^3.0.0", optional = true}
tox  = { version = "^3.24.5", optional = true}
virtualenv  = { version = "^20.13.1", optional = true}
pip  = { version = "^22.0.3", optional = true}
twine  = { version = "^3.8.0", optional = true}
pre-commit = {version = "^2.17.0", optional = true}
toml = {version = "^0.10.2", optional = true}
numpy = "^1.24.3"
scikit-learn = "^1.2.2"

[tool.poetry.extras]
test = [
    "pytest",
    "black",
    "isort",
    "flake8",
    "flake8-docstrings",
    "pytest-cov"
    ]

dev = ["tox", "pre-commit", "virtualenv", "pip", "twine", "toml", "mkinit"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line_length = 130
target_version = ["py37"]

[tool.isort]
profile = "black"
combine_as_imports = true
line_length = 130
extra_standard_library = [
    "typing_extensions",
    "_typeshed",
    # Extra modules not recognized by isort
    "_compression",
    "_csv",
    "_curses",
    "_markupbase",
    "_random",
    "_weakrefset",
    "genericpath",
    "opcode",
    "pyexpat",
    # Python 2 modules
    "__builtin__",
    "cookielib",
    "cStringIO",
    "httplib",
    "mimetools",
    "rfc822",
    "thread",
    "urllib2",
    "urlparse",
    "BaseHTTPServer",
    "Queue",
    "SimpleHTTPServer",
    "SocketServer",
    "StringIO",
    "UserDict",
    "UserList",
    "UserString",
]

[tool.mypy]
# Import discovery
mypy_path = "partial"
namespace_packages = false
explicit_package_bases = false
ignore_missing_imports = true
follow_imports = "normal"
follow_imports_for_stubs = false
no_site_packages = false
no_silence_site_packages = false
# Platform configuration
python_version = "3.8"
# Disallow dynamic typing
disallow_any_unimported = false # TODO
disallow_any_expr = false # TODO
disallow_any_decorated = false # TODO
disallow_any_explicit = false # TODO
disallow_any_generics = false # TODO
disallow_subclassing_any = false # TODO
# Untyped definitions and calls
disallow_untyped_calls = false # TODO
disallow_untyped_defs = false # TODO
disallow_incomplete_defs = false # TODO
check_untyped_defs = true
disallow_untyped_decorators = true
# None and Optional handling
no_implicit_optional = true
strict_optional = true
# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = false # Change from pandas
warn_no_return = true
warn_return_any = false # TODO
warn_unreachable = false # GH#27396
# Suppressing errors
show_none_errors = true
ignore_errors = false
# Miscellaneous strictness flags
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true
# Configuring error messages
show_error_context = false
show_column_numbers = false
show_error_codes = true